@using Microsoft.AspNetCore.Identity
@using YoneticiOtomasyonu.Models  <!-- Kendi projenin namespace'ine göre düzenle -->
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    var user = await UserManager.GetUserAsync(User);
    var profilePic = user?.ProfileImageUrl ?? "/images/default-profile.png";
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <link href="https://cdn.datatables.net/1.10.20/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - YoneticiOtomasyonu</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/YoneticiOtomasyonu.styles.css" asp-append-version="true" />
    @RenderSection("Styles", required: false)

    <style>
        /* Mesaj kutusu içi mesaj stilleri */
        .message-container {
            border-radius: 8px;
            padding: 10px 15px;
            margin-bottom: 10px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message-sender {
            background-color: #e3f2fd;
            margin-left: auto;
        }

        .message-receiver {
            background-color: #f1f1f1;
            margin-right: auto;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">YoneticiOtomasyonu</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Buildings" asp-action="Create">Kendi binanı oluştur</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav align-items-center">
                        @if (SignInManager.IsSignedIn(User))
                        {
                            <li class="nav-item me-2 position-relative">
                                @await Component.InvokeAsync("Notification")
                            </li>
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <img src="@profilePic" alt="Profil Resmi" class="rounded-circle" style="width:32px; height:32px; object-fit:cover;" />
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                    <li>
                                        <div class="px-3 py-2">
                                            <span class="fw-bold">@UserManager.GetUserName(User)</span>
                                        </div>
                                    </li>
                                    <li><hr class="dropdown-divider" /></li>
                                    <li>
                                        <a class="dropdown-item" asp-controller="Profile" asp-action="ProfiliDuzenle">
                                            <i class="fas fa-user me-2"></i>Profil Bilgilerim
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" asp-controller="Profile" asp-action="MyDebts">
                                            <i class="fas fa-money-check-alt me-2"></i>Borçlarım
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" asp-controller="Buildings" asp-action="Index">
                                            <i class="fas fa-building me-2"></i>Binalarım
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" asp-controller="WorkTask" asp-action="MyTasks">
                                            <i class="fas fa-tasks me-1"></i> Görevlerim
                                            @await Component.InvokeAsync("TaskCounter")
                                        </a>
                                    </li>
                                    <li><hr class="dropdown-divider" /></li>
                                    <li>
                                        <form method="post" asp-area="Identity" asp-page="/Account/Logout" id="logoutForm" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="dropdown-item bg-transparent border-0 w-100 text-start" style="cursor:pointer;">
                                                <i class="fas fa-sign-out-alt me-2"></i>Çıkış Yap
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Giriş Yap</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Kayıt Ol</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Chat Toggle Butonu -->
    <button id="chatToggle" class="btn btn-primary rounded-circle shadow position-fixed"
            style="bottom: 20px; right: 20px; width: 60px; height: 60px; z-index: 1050;">
        <i class="fas fa-comments"></i>
        <span id="unreadCount" class="badge rounded-pill bg-danger position-absolute"
              style="top: 0; right: 0; transform: translate(30%, -30%); display: none;">0</span>
    </button>

    <!-- Chat Kutusu -->
    <div id="chatBox" class="card shadow position-fixed d-flex flex-column"
         style="bottom: 90px; right: 20px; width: 320px; max-height: 400px; display: none; z-index: 1050;">
        <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
            <strong><i class="fas fa-comments me-2"></i> Mesajlar</strong>
            <button id="chatClose" class="btn-close btn-close-white" aria-label="Kapat"></button>
        </div>
        <div class="card-body p-3 flex-grow-1 overflow-auto" id="chatMessages" style="height: 300px;">
            <div class="text-center py-5 text-muted" id="noMessages">
                <i class="fas fa-comment-slash fa-3x mb-3"></i>
                <p>Henüz mesaj yok</p>
                <small>Bir yönetici seçerek mesajlaşmaya başlayın</small>
            </div>
        </div>
        <div class="card-footer p-3">
            <select id="receiverSelect" class="form-select mb-2" aria-label="Yönetici seçin">
                <option value="">Yönetici seçin</option>
            </select>
            <div class="input-group">
                <input type="text" id="chatInput" class="form-control" placeholder="Mesaj yaz..." disabled aria-label="Mesaj yaz" />
                <button id="sendButton" class="btn btn-primary" type="button" disabled aria-label="Gönder">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - YoneticiOtomasyonu - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        $(document).ready(function () {
            let isChatOpen = false;

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Chat kutusunu açma/kapama
            // Chat kutusunu açma/kapama
            $("#chatToggle").click(function () {
                if (isChatOpen) {
                    $("#chatBox").fadeOut(200, function () {
                        isChatOpen = false;
                    });
                } else {
                    $("#chatBox").fadeIn(200);
                    isChatOpen = true;
                    loadManagers();
                    updateUnreadCount();
                }
            });

            // Chat kutusu kapatma butonu
            $("#chatClose").click(function () {
                $("#chatBox").fadeOut(200, function () {
                    isChatOpen = false;
                });
            });


            async function loadManagers() {
                try {
                    showLoading("#receiverSelect", "Yöneticiler yükleniyor...");
                    const response = await fetch('/Message/GetMyManagers');
                    if (!response.ok) throw new Error("Yöneticiler alınamadı");

                    const managers = await response.json();
                    const select = $("#receiverSelect");
                    select.empty().append('<option value="">Yönetici seçin</option>');

                    if (managers.length === 0) {
                        select.append('<option value="" disabled>Yönetici bulunamadı</option>');
                    } else {
                        managers.forEach(manager => {
                            select.append(new Option(manager.name, manager.id));
                        });
                    }
                } catch (err) {
                    console.error("Yöneticiler yüklenirken hata:", err);
                    toastr.error("Yöneticiler yüklenirken bir hata oluştu");
                } finally {
                    hideLoading("#receiverSelect");
                }
            }

            function showLoading(element, text) {
                $(element).prop("disabled", true).html(`<option value="">${text}</option>`);
            }

            function hideLoading(element) {
                $(element).prop("disabled", false);
            }

            async function updateUnreadCount() {
                try {
                    const response = await fetch('/Message/GetUnreadCount');
                    const data = await response.json();
                    const badge = $("#unreadCount");

                    if (data.count > 0) {
                        badge.text(data.count).show();
                    } else {
                        badge.hide();
                    }
                } catch (err) {
                    console.error("Okunmamış mesaj sayısı alınırken hata:", err);
                }
            }

            $("#receiverSelect").change(async function () {
                const receiverId = $(this).val();
                const chatInput = $("#chatInput");
                const sendButton = $("#sendButton");

                if (receiverId) {
                    chatInput.prop("disabled", false);
                    sendButton.prop("disabled", false);

                    try {
                        showLoading("#chatMessages", "Mesajlar yükleniyor...");
                        const response = await fetch(`/Message/GetMessages?userId=${receiverId}`);

                        if (!response.ok) {
                            throw new Error(await response.text());
                        }

                        const messages = await response.json();
                        renderMessages(messages, "@UserManager.GetUserId(User)");
                    } catch (err) {
                        console.error("Mesajlar yüklenirken hata:", err);
                        toastr.error("Mesaj geçmişi yüklenirken bir hata oluştu: " + err.message);
                    } finally {
                        hideLoading("#chatMessages");
                    }
                } else {
                    chatInput.prop("disabled", true);
                    sendButton.prop("disabled", true);
                    $("#chatMessages").html(`
                                <div class="text-center py-5 text-muted" id="noMessages">
                                    <i class="fas fa-comment-slash fa-3x mb-3"></i>
                                    <p>Henüz mesaj yok</p>
                                    <small>Bir yönetici seçerek mesajlaşmaya başlayın</small>
                                </div>
                            `);
                }
            });

            function renderMessages(messages, currentUserId) {
                const chatMessages = $("#chatMessages");

                if (!messages || messages.length === 0) {
                    chatMessages.html(`
                                <div class="text-center py-5 text-muted" id="noMessages">
                                    <i class="fas fa-comment-slash fa-3x mb-3"></i>
                                    <p>Henüz mesaj yok</p>
                                    <small>İlk mesajı göndererek sohbeti başlatın</small>
                                </div>
                            `);
                    return;
                }

                $("#noMessages").remove();
                chatMessages.empty();

                messages.forEach(message => {
                    const isSender = message.senderId === currentUserId;
                    const messageClass = isSender ? "message-sender" : "message-receiver";

                    chatMessages.append(`
                                <div class="message-container ${messageClass}">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <small class="fw-bold">${isSender ? 'Siz' : message.senderName}</small>
                                        <small class="text-muted">${message.sentAt}</small>
                                    </div>
                                    <p class="mb-0">${message.content}</p>
                                </div>
                            `);
                });

                chatMessages.scrollTop(chatMessages[0].scrollHeight);
            }

            async function sendMessage() {
                const receiverId = $("#receiverSelect").val();
                const content = $("#chatInput").val().trim();

                if (!receiverId || !content) return;

                try {
                    $("#sendButton").prop("disabled", true);
                    const response = await fetch('/Message/SendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify({
                            ReceiverId: receiverId,
                            Content: content
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        $("#chatInput").val("");
                        $("#receiverSelect").trigger("change");
                    } else {
                        throw new Error(result.message || "Mesaj gönderilemedi");
                    }
                } catch (err) {
                    console.error("Mesaj gönderilirken hata:", err);
                    toastr.error("Mesaj gönderilirken bir hata oluştu: " + err.message);
                } finally {
                    $("#sendButton").prop("disabled", false);
                }
            }

            $("#sendButton").click(sendMessage);
            $("#chatInput").keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            connection.on("ReceiveMessage", (message) => {
                if (isChatOpen && $("#receiverSelect").val() === message.SenderId) {
                    $("#noMessages").remove();
                    const chatMessages = $("#chatMessages");

                    const messageHtml = `
                                <div class="message-container message-receiver">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <small class="fw-bold">${message.SenderName}</small>
                                        <small class="text-muted">${new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</small>
                                    </div>
                                    <p class="mb-0">${message.Content}</p>
                                </div>
                            `;

                    chatMessages.append(messageHtml);
                    chatMessages.scrollTop(chatMessages[0].scrollHeight);
                } else {
                    updateUnreadCount();
                    toastr.info(`Yeni mesaj: ${message.Content}`, `${message.SenderName}`, {
                        positionClass: "toast-bottom-right",
                        timeOut: 5000,
                        closeButton: true
                    });
                }
            });

            async function startConnection() {
                try {
                    await connection.start();
                    console.log("SignalR bağlantısı kuruldu");
                    await connection.invoke("JoinChatGroup", "@UserManager.GetUserId(User)");

                    connection.onclose(async () => {
                        console.log("SignalR bağlantısı kesildi. Yeniden bağlanıyor...");
                        await startConnection();
                    });
                } catch (err) {
                    console.error("SignalR bağlantı hatası:", err);
                    setTimeout(startConnection, 5000);
                }
            }

            startConnection();

            $(window).on("beforeunload", function () {
                connection.invoke("LeaveChatGroup", "@UserManager.GetUserId(User)");
            });

            updateUnreadCount();
            setInterval(updateUnreadCount, 30000);
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
