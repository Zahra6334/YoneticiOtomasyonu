@model List<YoneticiOtomasyonu.ViewComponents.RecentContactViewModel>
@using Microsoft.AspNetCore.Identity
@using YoneticiOtomasyonu.Models
@inject UserManager<ApplicationUser> UserManager

<button id="chatToggleBtn">
    <i class="fas fa-comments"></i>
</button>

<div id="chatBox" class="card shadow d-flex flex-column">
    <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
        <strong><i class="fas fa-comments me-2"></i> Mesajlar</strong>
        <button id="chatClose" class="btn-close btn-close-white" aria-label="Kapat"></button>
    </div>
    <div class="card-body p-0 flex-grow-1 overflow-auto" id="chatContainer" style="height: 300px;">
        <div id="recentContacts" class="list-group list-group-flush">
            @if (Model != null && Model.Any())
            {
                foreach (var contact in Model)
                {
                    <a href="#" class="list-group-item list-group-item-action contact-item"
                       data-userid="@contact.UserId"
                       data-username="@contact.FullName"
                       data-userimage="@contact.ProfileImageUrl">
                        <div class="d-flex align-items-center">
                            <div class="position-relative d-inline-block">
                                <img src="@contact.ProfileImageUrl" class="rounded-circle me-2" width="40" height="40" alt="@contact.FullName">
                                @if (contact.IsOnline)
                                {
                                    <span class="online-indicator"></span>
                                }
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">@contact.FullName</h6>
                                    <small class="text-muted">@contact.LastMessageDate.ToString("g")</small>
                                </div>
                                <small class="text-muted text-truncate d-block">Son mesaj...</small>
                            </div>
                            @if (contact.UnreadCount > 0)
                            {
                                <span class="badge bg-danger rounded-pill ms-2">@contact.UnreadCount</span>
                            }
                        </div>
                    </a>
                }
            }
            else
            {
                <div class="text-center py-5 text-muted">
                    <i class="fas fa-comment-slash fa-3x mb-3"></i>
                    <p>Henüz mesajlaşma yok</p>
                    <small>Bir yönetici seçerek mesajlaşmaya başlayın</small>
                </div>
            }
        </div>
        <div id="chatMessages" class="p-3" style="display: none;">
            <div id="chatHeader" class="d-flex justify-content-between align-items-center mb-3 pb-2 border-bottom" style="display: none;">
                <div class="d-flex align-items-center">
                    <img id="currentChatUserImage" src="" class="rounded-circle me-2" width="40" height="40" alt="">
                    <h6 id="currentChatUserName" class="mb-0"></h6>
                </div>
                <button id="backToContacts" class="btn btn-sm btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Geri
                </button>
            </div>
            <div id="messagesContainer"></div>
        </div>
    </div>
    <div class="card-footer p-3">
        <div id="chatControls" style="display: none;">
            <div class="input-group">
                <input type="text" id="chatInput" class="form-control" placeholder="Mesaj yaz..." aria-label="Mesaj yaz" />
                <button id="sendButton" class="btn btn-primary" type="button" aria-label="Gönder">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
        <div>
            <select id="receiverSelect" class="form-select mt-2" aria-label="Yönetici seçin">
                <option value="">Yönetici seçin</option>
            </select>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.12/signalr.min.js"></script>

<script>
    // Tüm fonksiyonlar ve değişkenler window nesnesine atanıyor
    (function (window, $) {
        let isChatOpen = localStorage.getItem('chatOpen') === 'true';
        const $chatBox = $("#chatBox");

        if (isChatOpen) {
            $chatBox.addClass("open");
        }

        window.toggleChat = function () {
            $chatBox.toggleClass("open");
            isChatOpen = $chatBox.hasClass("open");
            localStorage.setItem('chatOpen', isChatOpen);
        };

        window.closeChat = function () {
            $chatBox.removeClass("open");
            localStorage.setItem('chatOpen', false);
        };

        // Chat ile ilgili global değişkenler
        window.currentReceiverId = null;
        window.currentReceiverName = null;
        window.currentReceiverImage = null;

        // SignalR bağlantısı oluşturuluyor
        window.connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Mesajları yükleme fonksiyonu
        window.loadMessages = async function (userId) {
            try {
                const response = await fetch(`/Message/GetMessages?userId=${userId}`);
                if (!response.ok) throw new Error("Mesajlar alınamadı");

                const messages = await response.json();
                window.renderMessages(messages, "@UserManager.GetUserId(User)");
            } catch (err) {
                console.error("Mesajlar yüklenirken hata:", err);
                $("#messagesContainer").html('<div class="alert alert-danger">Mesajlar yüklenirken hata oluştu</div>');
            }
        };

        // Mesajları render etme fonksiyonu
        window.renderMessages = function (messages, currentUserId) {
            const messagesContainer = $("#messagesContainer");
            messagesContainer.empty();

            if (!messages || messages.length === 0) {
                messagesContainer.html(`
                        <div class="text-center py-5 text-muted">
                            <i class="fas fa-comment-slash fa-3x mb-3"></i>
                            <p>Henüz mesaj yok</p>
                            <small>İlk mesajı göndererek sohbeti başlatın</small>
                        </div>
                    `);
                return;
            }

            messages.forEach(message => {
                const isSender = message.senderId === currentUserId;
                const messageClass = isSender ? "message-sender" : "message-receiver";
                const isUnread = !isSender && !message.isRead;
                const unreadClass = isUnread ? "unread-message" : "";

                messagesContainer.append(`
                        <div class="message-container ${messageClass} ${unreadClass}">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <small class="fw-bold">${isSender ? 'Siz' : message.senderName}</small>
                                <small class="text-muted">${new Date(message.sentAt).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</small>
                            </div>
                            <p class="mb-0">${message.content}</p>
                        </div>
                    `);
            });

            messagesContainer.scrollTop(messagesContainer[0].scrollHeight);
        };

        // Okunmamış mesajları işaretleme fonksiyonu
        window.markMessagesAsRead = async function (senderId) {
            try {
                await fetch(`/Message/MarkAsRead?senderId=${senderId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                $(`.contact-item[data-userid="${senderId}"] .badge`).remove();
                window.updateUnreadCount();
            } catch (err) {
                console.error("Mesajlar okundu olarak işaretlenirken hata:", err);
            }
        };

        // Okunmamış mesaj sayılarını güncelleme fonksiyonu
        window.updateUnreadCount = async function () {
            try {
                const response = await fetch('/Message/GetUnreadCounts');
                const unreadCounts = await response.json();

                unreadCounts.forEach(item => {
                    const badge = $(`.contact-item[data-userid="${item.senderId}"] .badge`);
                    if (item.count > 0) {
                        if (badge.length) {
                            badge.text(item.count);
                        } else {
                            $(`.contact-item[data-userid="${item.senderId}"] .flex-grow-1`).after(
                                `<span class="badge bg-danger rounded-pill ms-2">${item.count}</span>`
                            );
                        }
                    } else {
                        badge.remove();
                    }
                });

                const totalUnread = unreadCounts.reduce((sum, item) => sum + item.count, 0);
                const totalBadge = $("#unreadCount");
                if (totalUnread > 0) {
                    totalBadge.text(totalUnread).show();
                } else {
                    totalBadge.hide();
                }
            } catch (err) {
                console.error("Okunmamış mesaj sayısı alınırken hata:", err);
            }
        };

        // Mesaj gönderme fonksiyonu
        window.sendMessage = async function () {
            const content = $("#chatInput").val().trim();
            if (!window.currentReceiverId || !content) return;

            try {
                $("#sendButton").prop("disabled", true);
                const response = await fetch('/Message/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        ReceiverId: window.currentReceiverId,
                        Content: content
                    })
                });

                const result = await response.json();

                if (result.success) {
                    $("#chatInput").val("");
                    // Mesajı hemen ekleyerek bekleme süresini azalt
                    const newMessage = {
                        senderId: "@UserManager.GetUserId(User)",
                        senderName: "Siz",
                        content: content,
                        sentAt: new Date().toISOString(),
                        isRead: true
                    };

                    if ($("#messagesContainer").text().includes("Henüz mesaj yok")) {
                        $("#messagesContainer").empty();
                    }

                    $("#messagesContainer").append(`
                            <div class="message-container message-sender">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <small class="fw-bold">Siz</small>
                                    <small class="text-muted">${new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</small>
                                </div>
                                <p class="mb-0">${content}</p>
                            </div>
                        `);

                    $("#messagesContainer").scrollTop($("#messagesContainer")[0].scrollHeight);
                } else {
                    throw new Error(result.message || "Mesaj gönderilemedi");
                }
            } catch (err) {
                console.error("Mesaj gönderilirken hata:", err);
                toastr.error("Mesaj gönderilirken bir hata oluştu: " + err.message);
            } finally {
                $("#sendButton").prop("disabled", false);
            }
        };

        // Chat başlatma fonksiyonu (bir kişiyle sohbet açmak için)
        window.openChatWithUser = function (userId, userName, userImage) {
            window.currentReceiverId = userId;
            window.currentReceiverName = userName;
            window.currentReceiverImage = userImage;

            $("#recentContacts").hide();
            $("#chatMessages").show();
            $("#chatHeader").show();
            $("#currentChatUserName").text(userName);
            $("#currentChatUserImage").attr("src", userImage);
            $("#chatControls").show();
            $("#receiverSelect").hide();
            $("#messagesContainer").html('<div class="text-center py-4"><i class="fas fa-spinner fa-spin"></i> Yükleniyor...</div>');

            window.loadMessages(userId);
            window.markMessagesAsRead(userId);
        };

        // SignalR Mesaj alma event'i
        window.connection.on("ReceiveMessage", (message) => {
            if (window.currentReceiverId === message.senderId) {
                const messagesContainer = $("#messagesContainer");
                if (messagesContainer.text().includes("Henüz mesaj yok")) {
                    messagesContainer.empty();
                }

                messagesContainer.append(`
                        <div class="message-container message-receiver">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <small class="fw-bold">${message.senderName}</small>
                                <small class="text-muted">${new Date(message.sentAt).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</small>
                            </div>
                            <p class="mb-0">${message.content}</p>
                        </div>
                    `);

                messagesContainer.scrollTop(messagesContainer[0].scrollHeight);
            } else {
                window.updateUnreadCount();
                toastr.info(`Yeni mesaj: ${message.content}`, `${message.senderName}`, {
                    positionClass: "toast-bottom-right",
                    timeOut: 5000,
                    closeButton: true
                });
            }
        });

        // SignalR bağlantısı başlatma fonksiyonu
        window.startConnection = async function () {
            try {
                if (window.connection.state !== signalR.HubConnectionState.Disconnected) {
                    await window.connection.stop();
                }

                await window.connection.start();
                console.log("SignalR bağlantısı kuruldu");

                await window.connection.invoke("JoinChatGroup", "@UserManager.GetUserId(User)")
                    .catch(err => console.error("JoinChatGroup hatası:", err));

                window.connection.onclose(async () => {
                    console.log("SignalR bağlantısı kesildi. Yeniden bağlanıyor...");
                    await window.startConnection();
                });
            } catch (err) {
                console.error("SignalR bağlantı hatası:", err);
                setTimeout(window.startConnection, 5000);
            }
        };

        // Document hazır olduğunda event bindleri
        $(document).ready(function () {
            // Toggle chat butonu
            $("#chatToggleBtn").click(window.toggleChat);

            // Kapatma butonu
            $("#chatClose").click(window.closeChat);

            // Kişi seçme
            $(document).on('click', '.contact-item', function (e) {
                e.preventDefault();
                window.openChatWithUser(
                    $(this).data('userid'),
                    $(this).data('username'),
                    $(this).data('userimage')
                );
            });

            // Geri butonu
            $("#backToContacts").click(function () {
                $("#chatMessages").hide();
                $("#chatHeader").hide();
                $("#recentContacts").show();
                $("#chatControls").hide();
                $("#receiverSelect").show();
                window.currentReceiverId = null;
                window.currentReceiverName = null;
                window.currentReceiverImage = null;
            });

            // Yeni kişi seçimi dropdown
            $("#receiverSelect").change(function () {
                const receiverId = $(this).val();
                if (receiverId) {
                    const receiverName = $(this).find("option:selected").text();
                    window.openChatWithUser(receiverId, receiverName, "/images/default-profile.png");
                    $("#receiverSelect").val('').hide();
                }
            });

            // Mesaj gönderme butonu
            $("#sendButton").click(window.sendMessage);
            $("#chatInput").keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    window.sendMessage();
                }
            });

            // SignalR bağlantısını başlat
            window.startConnection();
            // Okunmamış mesajları yükle
            window.updateUnreadCount();
        });

    })(window, jQuery);
</script>


<style>
    #chatToggleBtn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: #0d6efd;
        color: white;
        border: none;
        border-radius: 50%;
        width: 56px;
        height: 56px;
        cursor: pointer;
        z-index: 1100;
        font-size: 24px;
    }

    #chatBox {
        position: fixed;
        bottom: -500px;
        right: 20px;
        width: 320px;
        max-height: 500px;
        transition: bottom 0.4s ease;
        z-index: 1050;
    }

        #chatBox.open {
            bottom: 90px;
        }

    .message-container {
        padding: 8px 12px;
        margin-bottom: 8px;
        border-radius: 12px;
        max-width: 80%;
        word-wrap: break-word;
    }

    .message-sender {
        background-color: #e3f2fd;
        margin-left: auto;
    }

    .message-receiver {
        background-color: #f1f1f1;
        margin-right: auto;
    }

    .unread-message {
        background-color: #fff8e1;
        border-left: 3px solid #ffc107;
    }

    .contact-item:hover {
        background-color: #f8f9fa;
    }

    #chatMessages {
        background-color: #f9f9f9;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    #messagesContainer {
        flex-grow: 1;
        overflow-y: auto;
        padding-bottom: 10px;
    }

    #chatHeader {
        position: sticky;
        top: 0;
        background-color: #f9f9f9;
        z-index: 1;
    }

    .online-indicator {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 10px;
        height: 10px;
        background-color: #28a745; /* Bootstrap success yeşili */
        border: 2px solid white; /* Profil resmiyle birleşsin */
        border-radius: 50%;
    }
</style>